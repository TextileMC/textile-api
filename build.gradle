plugins {
    id 'textile-loom' version '0.5.1+build12'
    id 'net.minecrell.licenser' version '0.4.1'
}

project.version = "0.0.1-SNAPSHOT"

import net.fabricmc.loom.task.RunClientTask

allprojects {
    project.group = "textile-api"

    apply plugin: 'java'
    apply(plugin: "textile-loom")
    apply(plugin: "maven-publish")
    apply plugin: 'net.minecrell.licenser'

    loom {
        shareCaches = true
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        maven {
            name = "Jitpack"
            url "https://jitpack.io/"
        }
        maven {
            name = "Concerning"
            url "https://maven.concern.i.ng/"
        }
    }

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	task runTestmodClient(type: RunClientTask) {
		classpath sourceSets.testmod.runtimeClasspath
	}

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"

        mappings "net.textilemc:yarrn:inf-20100618+build20d332:v2"

//        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		// IMPORTANT
		// Until a certain pr is merged, make sure you
		// add -Dfabric.gameVersion=20100618 to your run
		// config's vm arguments otherwise bad

        modImplementation "com.github.sfPlayer1:fabric-loader:adad4b3"

        // Some dependencies aren't gotten by the loader, so we add them ourselves
        implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1'
        implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
        implementation 'com.google.guava:guava:28.0-jre'
        implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
        implementation 'org.ow2.asm:asm:8.0'
        implementation 'org.ow2.asm:asm-analysis:8.0'
        implementation 'org.ow2.asm:asm-commons:8.0'
        implementation 'org.ow2.asm:asm-tree:8.0'
        implementation 'org.ow2.asm:asm-util:8.0'
        annotationProcessor group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1'
        annotationProcessor group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
    }

    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.1-nightly-20130708-debug3') with module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')
                substitute module('org.lwjgl.lwjgl:lwjgl:2.9.1-nightly-20130708-debug3') with module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209')
            }
            force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
        }
    }

    license {
        header = rootProject.file('HEADER')
        include '**/*.java'
    }

    minecraft {
        intermediaryUrl = {
            return "https://maven.concern.i.ng/net/textilemc/intermediary/" + it + "/intermediary-" + it + "-v2.jar"
        }

        clientOnly = true
    }

    processResources {
        inputs.property "version", project.version

        from(sourceSets.main.resources.srcDirs) {
            include "fabric.mod.json"
            expand "version": project.version
        }

        from(sourceSets.main.resources.srcDirs) {
            exclude "fabric.mod.json"
        }
    }

    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this task, sources will not be generated.
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }
}

subprojects {
	dependencies {
		testmodCompile sourceSets.main.output
	}
}

sourceSets {
	testmod
}

javadoc {
    options {
        source = "8"
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        memberLevel = JavadocMemberLevel.PACKAGE
        links(
                'https://guava.dev/releases/21.0/api/docs/',
                'https://asm.ow2.io/javadoc/',
                'https://docs.oracle.com/javase/8/docs/api/',
                'https://jenkins.liteloader.com/job/Mixin/javadoc/',
                'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'
                // Need to add minecraft jd publication etc once there is one available
        )
        // Disable the crazy super-strict doclint tool in Java 8
        addStringOption('Xdoclint:none', '-quiet')
    }
    allprojects.each {
        source(it.sourceSets.main.allJava.srcDirs)
    }
    classpath = sourceSets.main.compileClasspath
    include("**/api/**")
    failOnError false
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    from javadoc.destinationDir
    //Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc
    classifier = 'fatjavadoc'
}
build.dependsOn javadocJar

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

minecraft {
    accessWidener "src/main/resources/textile.accesswidener"
}
